{
    "prompt": "Professional blue-gray calendar: navy header, arrow navigation, serif day labels, square grid, teal highlight today, red event markers, gray inactive dates, navy floating button.",
    "flutter_code": "import 'package:flutter/material.dart';\n\nclass GeneratedWidget extends StatefulWidget {\n  @override\n  _GeneratedWidgetState createState() => _GeneratedWidgetState();\n}\n\nclass _GeneratedWidgetState extends State<GeneratedWidget> {\n  final List<String> dayLabels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  final List<List<dynamic>> calendarDates = [\n    [28, 29, 30, 31, 1, 2, 3],\n    [4, 5, 6, 7, 8, 9, 10],\n    [11, 12, 13, 14, 15, 16, 17],\n    [18, 19, 20, 21, 22, 23, 24],\n    [25, 26, 27, 28, 29, 30, 1],\n    [2, 3, 4, 5, 6, 7, 8]\n  ];\n  final List<int> eventDates = [10, 20, 30];\n  final int today = 18;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      backgroundColor: Color(0xFFECEFF1),\n      appBar: AppBar(\n        backgroundColor: Color(0xFFECEFF1),\n        elevation: 0,\n        title: Row(\n          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n          children: [\n            IconButton(\n              icon: Icon(Icons.arrow_back_ios, color: Colors.blue[900]),\n              onPressed: () {},\n            ),\n            Text(\n              'April 2025',\n              style: TextStyle(\n                color: Colors.blue[900],\n                fontSize: 22,\n                fontWeight: FontWeight.bold,\n                fontFamily: 'Lora',\n              ),\n            ),\n            IconButton(\n              icon: Icon(Icons.arrow_forward_ios, color: Colors.blue[900]),\n              onPressed: () {},\n            ),\n          ],\n        ),\n      ),\n      body: Padding(\n        padding: EdgeInsets.all(20.0),\n        child: Column(\n          children: [\n            Row(\n              children: dayLabels.map((day) => Expanded(\n                child: Center(\n                  child: Text(\n                    day,\n                    style: TextStyle(\n                      color: Colors.grey[800],\n                      fontSize: 14,\n                      fontFamily: 'Lora',\n                      fontWeight: FontWeight.w500,\n                    ),\n                  ),\n                ),\n              )).toList(),\n            ),\n            SizedBox(height: 20),\n            ...calendarDates.map((week) => Container(\n              height: 60,\n              child: Row(\n                children: week.map<Widget>((date) {\n                  bool isCurrentMonth = (week == calendarDates[0] && date >= 1) ||\n                      (week != calendarDates[0] && week != calendarDates[5]) ||\n                      (week == calendarDates[5] && date == 30);\n                  bool isToday = date == today && isCurrentMonth;\n                  bool hasEvent = eventDates.contains(date) && isCurrentMonth;\n                  return Expanded(\n                    child: Container(\n                      margin: EdgeInsets.all(4),\n                      decoration: BoxDecoration(\n                        border: Border.all(color: Colors.blue[200]!),\n                        color: isToday ? Colors.teal : Colors.white,\n                        boxShadow: [BoxShadow(blurRadius: 2, color: Colors.black12, offset: Offset(0, 1))],\n                      ),\n                      child: Column(\n                        mainAxisAlignment: MainAxisAlignment.center,\n                        children: [\n                          Text(\n                            date.toString(),\n                            style: TextStyle(\n                              color: isToday ? Colors.white : isCurrentMonth ? Colors.black : Colors.grey[400],\n                              fontSize: 16,\n                              fontFamily: 'Lora',\n                              fontWeight: isToday ? FontWeight.bold : FontWeight.normal,\n                            ),\n                          ),\n                          if (hasEvent)\n                            CustomPaint(\n                              size: Size(8, 8),\n                              painter: TrianglePainter(color: Colors.red),\n                            ),\n                        ],\n                      ),\n                    ),\n                  );\n                }).toList(),\n              ),\n            )).toList(),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {},\n        backgroundColor: Colors.blue[900],\n        child: Icon(Icons.add, color: Colors.white),\n        tooltip: 'Add Event',\n      ),\n      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,\n    );\n  }\n}\n\nclass TrianglePainter extends CustomPainter {\n  final Color color;\n  TrianglePainter({required this.color});\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final paint = Paint()..color = color;\n    final path = Path()\n      ..moveTo(size.width / 2, 0)\n      ..lineTo(0, size.height)\n      ..lineTo(size.width, size.height)\n      ..close();\n    canvas.drawPath(path, paint);\n  }\n\n  @override\n  bool shouldRepaint(CustomPainter oldDelegate) => false;\n}",
    "category": "productivity",
    "tags": [
        "calendar",
        "date",
        "month",
        "grid",
        "events",
        "navigation",
        "professional",
        "blue-gray"
    ],
    "components": [
        "Scaffold",
        "AppBar",
        "Column",
        "Row",
        "Container",
        "FloatingActionButton",
        "IconButton",
        "Text",
        "CustomPaint"
    ],
    "layout_type": "Column"
}